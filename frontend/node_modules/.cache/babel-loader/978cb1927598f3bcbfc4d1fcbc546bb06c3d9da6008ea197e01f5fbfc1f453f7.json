{"ast":null,"code":"var _jsxFileName = \"/Users/mehmetatayurt/Desktop/Software/pomodoroapp/pomodoro-app/frontend/src/components/PomodoroTimer.jsx\",\n  _s = $RefreshSig$();\n// src/components/PomodoroTimer.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = () => {\n  _s();\n  // Durum (state) değişkenlerini tanımlıyoruz\n  const [time, setTime] = useState(workTime); // 25 dakika (1500 saniye)\n  const [isActive, setIsActive] = useState(false); // Sayaç aktif mi değil mi\n  const [isBreak, setIsBreak] = useState(false); // Mola zamanı mı değil mi\n  const [workTime, setWorkTime] = useState(1500); // Çalışma süresi\n  const [breakTime, setBreakTime] = useState(300); // Mola süresi\n\n  useEffect(() => {\n    setTime(workTime); // workTime prop değiştiğinde zamanlayıcıyı güncelle\n  }, [workTime]);\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      // Sayaç aktifse, her saniyede bir zamanı azaltıyoruz\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (!isActive && time !== 0) {\n      // Sayaç aktif değilse ve zaman 0 değilse, interval'i temizliyoruz\n      clearInterval(interval);\n    }\n    if (time === 0) {\n      // Zaman sıfırlandığında\n      if (isBreak) {\n        // Mola zamanıysa, çalışma süresine geçiyoruz\n        setTime(workTime);\n        setIsBreak(false);\n      } else {\n        // Çalışma zamanıysa, mola süresine geçiyoruz\n        setTime(breakTime);\n        setIsBreak(true);\n      }\n      playSound();\n    }\n    return () => clearInterval(interval); // Bileşen her güncellendiğinde interval'i temizliyoruz\n  }, [isActive, time, isBreak, workTime, breakTime]);\n  const playSound = () => {\n    const audio = new Audio('alarm_sound.mp3'); // Alarm sesi dosyasını çalıyoruz\n    audio.play();\n  };\n  const playSound2 = () => {\n    const audio = new Audio('click_sound.mp3');\n    audio.play();\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`; // Zamanı dakika ve saniye formatında gösteriyoruz\n  };\n  const handleStartPause = () => {\n    playSound2();\n    setIsActive(!isActive); // Sayaç duraklatılıyor veya başlatılıyor\n  };\n  const handleReset = () => {\n    playSound2();\n    setIsActive(false); // Sayaç duraklatılıyor\n    setTime(workTime); // Zaman çalışma süresine sıfırlanıyor\n    setIsBreak(false); // Çalışma moduna geçiliyor\n  };\n  const handleToggleMode = () => {\n    playSound2();\n    if (isBreak) {\n      setIsBreak(false);\n      setTime(workTime);\n    } else {\n      setIsBreak(true);\n      setTime(breakTime);\n    }\n    setIsActive(false); // Mod değiştirirken sayaç duraklatılır.\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isBreak ? 'Break Time' : 'Work Time'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: formatTime(time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartPause,\n        className: \"button\",\n        children: isActive ? 'Pause' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleMode,\n        className: \"button\",\n        children: isBreak ? 'Switch to Work' : 'Switch to Break'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/settings\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: playSound2,\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(PomodoroTimer, \"TGWuQnVISM4DMm5Ju0wX1IpY1s8=\");\n_c = PomodoroTimer;\nexport default PomodoroTimer;\nvar _c;\n$RefreshReg$(_c, \"PomodoroTimer\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","PomodoroTimer","_s","time","setTime","workTime","isActive","setIsActive","isBreak","setIsBreak","setWorkTime","breakTime","setBreakTime","interval","setInterval","prevTime","clearInterval","playSound","audio","Audio","play","playSound2","formatTime","seconds","minutes","Math","floor","secs","handleStartPause","handleReset","handleToggleMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","_c","$RefreshReg$"],"sources":["/Users/mehmetatayurt/Desktop/Software/pomodoroapp/pomodoro-app/frontend/src/components/PomodoroTimer.jsx"],"sourcesContent":["// src/components/PomodoroTimer.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../main.css\"\n\nconst PomodoroTimer = () => {\n  // Durum (state) değişkenlerini tanımlıyoruz\n  const [time, setTime] = useState(workTime); // 25 dakika (1500 saniye)\n  const [isActive, setIsActive] = useState(false); // Sayaç aktif mi değil mi\n  const [isBreak, setIsBreak] = useState(false); // Mola zamanı mı değil mi\n  const [workTime, setWorkTime] = useState(1500); // Çalışma süresi\n  const [breakTime, setBreakTime] = useState(300); // Mola süresi\n\n  useEffect(() => {\n    setTime(workTime); // workTime prop değiştiğinde zamanlayıcıyı güncelle\n  }, [workTime]);\n\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      // Sayaç aktifse, her saniyede bir zamanı azaltıyoruz\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime - 1);\n      }, 1000);\n    } else if (!isActive && time !== 0) {\n      // Sayaç aktif değilse ve zaman 0 değilse, interval'i temizliyoruz\n      clearInterval(interval);\n    }\n\n    if (time === 0) {\n      // Zaman sıfırlandığında\n      if (isBreak) {\n        // Mola zamanıysa, çalışma süresine geçiyoruz\n        setTime(workTime);\n        setIsBreak(false);\n      } else {\n        // Çalışma zamanıysa, mola süresine geçiyoruz\n        setTime(breakTime);\n        setIsBreak(true);\n      }\n      playSound();\n    }\n\n    return () => clearInterval(interval); // Bileşen her güncellendiğinde interval'i temizliyoruz\n  }, [isActive, time, isBreak, workTime, breakTime]);\n\n  const playSound = () => {\n    const audio = new Audio('alarm_sound.mp3'); // Alarm sesi dosyasını çalıyoruz\n    audio.play();\n  };\n\n  const playSound2 = () => {\n    const audio = new Audio('click_sound.mp3');\n    audio.play()\n  }\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`; // Zamanı dakika ve saniye formatında gösteriyoruz\n  };\n\n  const handleStartPause = () => {\n    playSound2()\n    setIsActive(!isActive); // Sayaç duraklatılıyor veya başlatılıyor\n  };\n\n  const handleReset = () => {\n    playSound2()\n    setIsActive(false); // Sayaç duraklatılıyor\n    setTime(workTime); // Zaman çalışma süresine sıfırlanıyor\n    setIsBreak(false); // Çalışma moduna geçiliyor\n  };\n\n  const handleToggleMode = () => {\n    playSound2()\n    if (isBreak) {\n      setIsBreak(false)\n      setTime(workTime)\n    }else {\n      setIsBreak(true)\n      setTime(breakTime)\n    }\n    setIsActive(false) // Mod değiştirirken sayaç duraklatılır.\n  }\n\n  return (\n    <div className='center'>\n      <div>\n        <h1>{isBreak ? 'Break Time' : 'Work Time'}</h1>\n        <div className='timer'>{formatTime(time)}</div>\n        <button onClick={handleStartPause} className='button'>{isActive ? 'Pause' : 'Start'}</button>\n        <button onClick={handleReset} className='button'>Reset</button>\n        <button onClick={handleToggleMode} className='button'>{isBreak ? 'Switch to Work' : 'Switch to Break'}</button>\n        <br />\n        <Link to=\"/settings\">\n          <button className='button' onClick={playSound2}>Settings</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default PomodoroTimer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}