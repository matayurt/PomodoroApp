{"ast":null,"code":"var _jsxFileName = \"/Users/mehmetatayurt/Desktop/Software/pomodoroapp/pomodoro-app/frontend/src/components/PomodoroTimer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PomodoroTimer = () => {\n  _s();\n  const [time, setTime] = useState(1500); // 1500 saniye 25 dakika\n  const [isActive, setIsActive] = useState(false); // Sayaç aktif mi değil mi\n  const [isBreak, setIsBreak] = useState(false); // Mola zamanı mı değil mi\n  const [workTime, setWorkTime] = useState(1500); // Çalışma süresi\n  const [breakTime, setBreakTime] = useState(300); // Mola süresi\n\n  //TODO \"let interval = null\"\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      // Sayaç aktifse, her saniyede bir zamanı azaltıyoruz\n      interval = setInterval(() => {\n        setTimeout(prevTime => prevTime - 1);\n      }, 1000);\n    } else if (!isActive && time !== 0) {\n      // Sayaç aktif değilse ve zaman 0 değilse, interval'i temizliyoruz\n      clearInterval(interval);\n    }\n    if (time === 0) {\n      // Zaman sıfırlandığında\n      if (isBreak) {\n        // Mola zamanıysa, çalışma süresine geçiyoruz\n        setTime(workTime);\n        setIsBreak(false);\n      } else {\n        // Çalışma zamanıysa, mola süresine geçiyoruz\n        setTime(breakTime);\n        setIsBreak(true);\n      }\n      playSound();\n    }\n    return () => clearInterval(interval); // Bileşen her güncellendiğinde interval'i temizliyoruz\n  }, [isActive, time, isBreak, workTime, breakTime]);\n  const playSound = () => {\n    const audio = new Audio('alarm_sound.mp3'); // Alarm sesi dosyasını çalıyoruz\n    audio.play();\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`; // Zamanı dakika ve saniye formatında gösteriyoruz\n  };\n  const handleStartPause = () => {\n    setIsActive(!isActive); // Sayaç duraklatılıyor veya başlatılıyor\n  };\n  const handleReset = () => {\n    setIsActive(false); // Sayaç duraklatılıyor\n    setTime(workTime); // Zaman çalışma süresine sıfırlanıyor\n    setIsBreak(false); // Çalışma moduna geçiliyor\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isBreak ? 'Break Time' : 'Work Time'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: formatTime(time)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartPause,\n        children: isActive ? 'Pause' : 'Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(PomodoroTimer, \"uRBt+KQenjtC03SG5Z33KplE570=\");\n_c = PomodoroTimer;\nexport default PomodoroTimer;\nvar _c;\n$RefreshReg$(_c, \"PomodoroTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","PomodoroTimer","_s","time","setTime","isActive","setIsActive","isBreak","setIsBreak","workTime","setWorkTime","breakTime","setBreakTime","interval","setInterval","setTimeout","prevTime","clearInterval","playSound","audio","Audio","play","formatTime","seconds","minutes","Math","floor","secs","handleStartPause","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/mehmetatayurt/Desktop/Software/pomodoroapp/pomodoro-app/frontend/src/components/PomodoroTimer.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nconst PomodoroTimer = () => {\n    const [time, setTime] = useState(1500); // 1500 saniye 25 dakika\n    const [isActive, setIsActive] = useState(false); // Sayaç aktif mi değil mi\n    const [isBreak, setIsBreak] = useState(false); // Mola zamanı mı değil mi\n    const [workTime, setWorkTime] = useState(1500); // Çalışma süresi\n    const [breakTime, setBreakTime] = useState(300); // Mola süresi\n\n    //TODO \"let interval = null\"\n    useEffect(() => {\n        let interval = null \n\n        if (isActive) {\n            // Sayaç aktifse, her saniyede bir zamanı azaltıyoruz\n            interval = setInterval(() => {\n                setTimeout((prevTime) => prevTime - 1)\n            }, 1000)\n        } else if (!isActive && time !== 0) {\n            // Sayaç aktif değilse ve zaman 0 değilse, interval'i temizliyoruz\n            clearInterval(interval)\n        }\n\n        if (time === 0) {\n            // Zaman sıfırlandığında\n            if(isBreak) {\n                // Mola zamanıysa, çalışma süresine geçiyoruz\n                setTime(workTime);\n                setIsBreak(false);\n            } else {\n                // Çalışma zamanıysa, mola süresine geçiyoruz\n                setTime(breakTime) \n                setIsBreak(true)\n            }\n            playSound()\n        }\n\n        return () => clearInterval(interval) // Bileşen her güncellendiğinde interval'i temizliyoruz\n\n    }, [isActive, time, isBreak, workTime, breakTime])\n\n    const playSound = () => {\n        const audio = new Audio('alarm_sound.mp3'); // Alarm sesi dosyasını çalıyoruz\n        audio.play()\n    }\n\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60)\n        const secs = seconds % 60;\n        return `${minutes}:${secs < 10 ? '0' : ''}${secs}`; // Zamanı dakika ve saniye formatında gösteriyoruz\n    }\n\n    const handleStartPause = () => {\n        setIsActive(!isActive); // Sayaç duraklatılıyor veya başlatılıyor\n      };\n    \n\n    const handleReset = () => {\n        setIsActive(false) // Sayaç duraklatılıyor\n        setTime(workTime) // Zaman çalışma süresine sıfırlanıyor\n        setIsBreak(false) // Çalışma moduna geçiliyor\n    }\n\n    return(\n        <>\n            <div>\n                <h1>{isBreak ? 'Break Time' : 'Work Time'}</h1>\n                <div>{formatTime(time)}</div>\n                <button onClick={handleStartPause}>{isActive ? 'Pause' : 'Start'}</button>\n                <button onClick={handleReset}>Reset</button>\n            </div>\n        </>\n    )\n}\n\n\n\nexport default PomodoroTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}